import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import { Con, Row, Col } from 'bee-layout';
import { Panel } from 'bee-panel';
import Drawer from 'bee-drawer';
import Clipboard from 'bee-clipboard'; 
import './demo.scss';


import Demo1 from "./demolist/Demo1";import Demo2 from "./demolist/Demo2";import Demo3 from "./demolist/Demo3";import Demo4 from "./demolist/Demo4";import Demo5 from "./demolist/Demo5";
var DemoArray = [{"example":<Demo1 />,"title":" 基础示例1","code":"/**\n *\n * @title 基础示例1\n * @description RefMultipleTableBaseUI, `multiple=fasle`单选、`miniSearch`简单搜索。注意单选展示radio需要手动封装\n *\n */\nimport React, { Component } from 'react';\nimport RefMultipleTableBaseUI from '../../src/index';\nimport '../../src/index.less';\nimport { Button } from 'tinper-bee';\nimport Radio from 'bee-radio';\nimport 'bee-radio/build/Radio.css';\nimport request from './request';\nlet options = {}\nclass Demo1 extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showLoading: false,\n      showModal: false,\n      matchData:[\n        {\n          \"mobile\":\"15011430235\",\n          \"name\":\"人员5\",\n          \"refpk\":\"5e3a85ec-5e14-4734-8b3a-1e6168426c89\",\n          \"refname\":\"人员5\",\n          // \"email\":\"55@26.com\"\n        }\n      ],\n    };\n    this.page = {\n      pageCount: 0,\n      pageSize: 10,\n      currPageIndex: 1,\n    };\n    this.tableData = [];\n    this.columnsData = [];\n\n  }\n  \n  /**\n   * @msg: 请求mock数据，包含表头数据和表体数据\n   * @param {type} \n   * @return: \n   */\n  loadData = async () => {\n    let refModelUrl = {\n      tableBodyUrl: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/blobRefTreeGrid',//表体请求\n      refInfo: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/refInfo',//表头请求\n    }\n    let requestList = [\n      request(refModelUrl.refInfo, { method: 'get' }),//表头数据\n      request(refModelUrl.tableBodyUrl, { method: 'get' }), //表体数据\n    ];\n    Promise.all(requestList).then(([columnsData, bodyData]) => {\n      this.launchTableHeader(columnsData);\n      this.launchTableData(bodyData);\n      this.setState({\n        showLoading: false\n      });\n    }).catch((e) => {\n      this.launchTableHeader({});\n      this.launchTableData({});\n      this.setState({\n        showLoading: false\n      });\n      console.log(e)\n    });;\n  }\n  /**\n * 根据 refinfo 返回结果拆解并渲染表格表头\n * @param {object} data \n   * 注意：单选时候自己添加radio\n */\n  launchTableHeader = (data) => {\n    if (!data) return;\n    let { multiple, valueField } = options;\n    let keyList = data.strFieldCode || [];\n    let titleList = data.strFieldName || [];\n    let colunmsList = keyList.map((item, index) => {\n      return {\n        key: item,\n        dataIndex: item,\n        title: titleList[index]\n      }\n    });\n    if (colunmsList.length === 0) {\n      colunmsList = [{ title: \"未传递表头数据\", dataIndex: \"nodata\", key: \"nodata\" }];\n    } else if (!multiple) {\n      colunmsList.unshift({\n        title: \" \",\n        dataIndex: \"a\",\n        key: \"a\",\n        width: 45,\n        render(text, record, index) {\n          return (\n            <Radio.RadioGroup\n              name={record[valueField]}\n              selectedValue={record._checked ? record[valueField] : null}\n            >\n              <Radio value={record[valueField]}></Radio>\n            </Radio.RadioGroup>\n          )\n        }\n      })\n    }\n    this.columnsData = colunmsList\n\n  }\n\t/**\n\t * 处理并渲染表格数据\n\t */\n  launchTableData = (response) => {\n    if (!response) return;\n    let { valueField } = options;\n    let { data = [], page = {} } = response;\n    data.map((record, k) => {\n      record.key = record[valueField];\n      return record;\n    });\n    this.tableData = data;\n    this.page = {\n      pageCount: page.pageCount || 0,\n      currPageIndex: page.currPageIndex + 1 || 0,\n      totalElements: page.totalElements || 0\n    }\n  }\n  /**\n   * @msg: 简单搜索的回调，与复杂搜索的回调不是同一个\n   * @param {type} \n   * @return: \n   */\n  miniSearchFunc = (value) =>{\n    alert('搜索'+value)\n  }\n\n  /**\n   * 跳转到制定页数的操作\n   * @param {number} index 跳转页数\n   */\n  handlePagination = (index) => {\n    this.page.currPageIndex = index;\n    this.setState({ number: Math.random() })\n  }\n\t/**\n\t * 选择每页数据个数\n\t */\n  dataNumSelect = (index, pageSize) => {\n    console.log(index, pageSize)\n  }\n  /**\n   * @msg: modal框确认按钮\n   * @param {type} \n   * @return: \n   */\n  onSave = (item) => {\n    this.checkedArray = item;\n    this.setState({\n      showModal: false,\n      matchData: item,\n    })\n  }\n  /**\n   * @msg: modal框右上X和右下角取消\n   * @param {type} \n   * @return: \n   */\n  onCancel = () => {\n    this.setState({ showModal: false })\n  }\n\n  render() {\n    let { showLoading, showModal ,matchData} = this.state;\n    let { columnsData, tableData, page } = this;\n    options = {\n      miniSearch: true,\n      multiple: false,\n      valueField: \"refpk\",\n      displayField: \"{refname}\",\n    }\n    let childrenProps = Object.assign({}, options, {\n      showModal: showModal,\n      showLoading: showLoading,\n      columnsData: columnsData,\n      tableData: tableData,\n      ...page,\n      matchData,\n      miniSearchFunc:this.miniSearchFunc,\n      dataNumSelect: this.dataNumSelect,\n      handlePagination: this.handlePagination,\n      onSave: this.onSave,\n      onCancel: this.onCancel,\n    });\n    return (\n      <div className=\"demoPadding\">\n        <RefMultipleTableBaseUI\n          {...childrenProps}\n        \n        />\n        <Button\n          colors=\"primary\"\n          onClick={() => {\n            this.setState({ showModal: true },()=>{this.loadData()})\n          }}>打开参照</Button>\n      </div>\n    )\n  }\n}\n\n\n\n","desc":" RefMultipleTableBaseUI, `multiple=fasle`单选、`miniSearch`简单搜索。注意单选展示radio需要手动封装"},{"example":<Demo2 />,"title":" 基础示例2","code":"/**\n *\n * @title 基础示例2\n * @description RefMultipleTableWithInput, `multiple`多选、`fliterFormInputs`复杂搜索。\n *\n */\nimport React, { Component } from 'react';\nimport { RefMultipleTableWithInput, SearchPanelItem } from '../../src/index';\nimport '../../src/index.less';\nimport { Button, Form, FormControl } from 'tinper-bee';\nimport request from './request';\nlet options = {}\nclass Demo2 extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showLoading: false,\n      showModal: false,\n      matchData: [\n        {\n          \"code\":\"005\",\n          \"mobile\": \"15011430235\",\n          \"name\": \"人员5\",\n          \"refpk\": \"5e3a85ec-5e14-4734-8b3a-1e6168426c89\",\n          \"refname\": \"人员5\",\n          \"email\": \"55@26.com\"\n        }\n      ],\n      value: '{\"refname\":\"人员5-自定义\",\"refpk\":\"5e3a85ec-5e14-4734-8b3a-1e6168426c89\"}',\n    };\n    this.page = {\n      pageCount: 0,\n      pageSize: 10,\n      currPageIndex: 1,\n    };\n    this.tableData = [];\n    this.columnsData = [];\n    this.fliterFormInputs = [];\n\n  }\n  componentDidMount() {\n    this.loadData();\n    this.props.form.setFieldsValue({\n      ['table2']:this.state.value\n    });\n    setTimeout(() => {\n      this.setState({\n        matchData: [\n          {\n            \"code\":\"005\",\n            \"mobile\": \"15011430235\",\n            \"name\": \"人员7\",\n            \"refpk\": \"394bba90-ed0f-4794-a44e-fd9ce6e9257d\",\n            \"refname\": \"人员5\",\n            \"email\": \"55@26.com\"\n          }\n        ]\n      })\n      this.props.form.setFieldsValue({\n        ['table2']: '{\"refname\":\"人员7-自定义\",\"refpk\":\"394bba90-ed0f-4794-a44e-fd9ce6e9257d\"}',\n      });\n    }, 14000);\n  }\n  /**\n   * @msg: 请求mock数据，包含表头数据和表体数据\n   * @param {type} \n   * @return: \n   */\n  loadData = async () => {\n    let refModelUrl = {\n      tableBodyUrl: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/blobRefTreeGrid',//表体请求\n      refInfo: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/refInfo',//表头请求\n    }\n    let requestList = [\n      request(refModelUrl.refInfo, { method: 'get' }),//表头数据\n      request(refModelUrl.tableBodyUrl, { method: 'get' }), //表体数据\n    ];\n    Promise.all(requestList).then(([columnsData, bodyData]) => {\n      this.launchTableHeader(columnsData);\n      this.launchTableData(bodyData);\n      this.setState({\n        showLoading: false\n      });\n    }).catch((e) => {\n      this.launchTableHeader({});\n      this.launchTableData({});\n      this.setState({\n        showLoading: false\n      });\n      console.log(e)\n    });;\n  }\n  /**\n * 根据 refinfo 返回结果拆解并渲染表格表头\n * @param {object} data \n   * 注意：单选时候自己添加radio\n */\n  launchTableHeader = (data) => {\n    if (!data) return;\n    let keyList = data.strFieldCode || [];\n    let titleList = data.strFieldName || [];\n    let colunmsList = keyList.map((item, index) => {\n      this.fliterFormInputs.push(\n        <SearchPanelItem key={item} name={item} text={titleList[index]}>\n          <FormControl size={'sm'} />\n        </SearchPanelItem>\n      )\n      return {\n        key: item,\n        dataIndex: item,\n        title: titleList[index]\n      }\n    });\n    if (colunmsList.length === 0) {\n      colunmsList = [{ title: \"未传递表头数据\", dataIndex: \"nodata\", key: \"nodata\" }];\n    }\n    this.columnsData = colunmsList;\n  }\n\t/**\n\t * 处理并渲染表格数据\n\t */\n  launchTableData = (response) => {\n    if (!response) return;\n    let { valueField } = options;\n    let { data = [], page = {} } = response;\n    data.map((record, k) => {\n      record.key = record[valueField];\n      return record;\n    });\n    this.tableData = data;\n    this.page = {\n      pageCount: page.pageCount || 0,\n      currPageIndex: page.currPageIndex + 1 || 0,\n      totalElements: page.totalElements || 0\n    }\n  }\n  /**\n   * @msg: 简单搜索的回调，与复杂搜索的回调不是同一个\n   * @param {type} \n   * @return: \n   */\n  searchFilterInfo = (value) => {\n    alert('搜索' + JSON.stringify(value))\n  }\n\n  /**\n   * 跳转到制定页数的操作\n   * @param {number} index 跳转页数\n   */\n  handlePagination = (index) => {\n    this.page.currPageIndex = index;\n    this.setState({ number: Math.random() })\n  }\n\t/**\n\t * 选择每页数据个数\n\t */\n  dataNumSelect = (index, pageSize) => {\n    console.log(index, pageSize)\n  }\n  /**\n   * @msg: modal框确认按钮\n   * @param {type} \n   * @return: \n   */\n  onSave = (item) => {\n    this.checkedArray = item;\n    this.setState({\n      showModal: false,\n      matchData: item,\n    })\n  }\n  /**\n   * @msg: modal框右上X和右下角取消\n   * @param {type} \n   * @return: \n   */\n  onCancel = () => {\n    this.setState({ showModal: false })\n  }\n\n  render() {\n    let { getFieldProps, getFieldError } = this.props.form;\n    let { showLoading, showModal, matchData, value } = this.state;\n    let { columnsData, tableData, page, fliterFormInputs } = this;\n    options = {\n      miniSearch: false,\n      multiple: true,\n      valueField: \"refpk\",\n      displayField: \"{code}-大前端{name}\",\n      emptyBut: true\n    }\n    let childrenProps = Object.assign({}, options, {\n      showModal: showModal,\n      showLoading: showLoading,\n      columnsData: columnsData,\n      tableData: tableData,\n      fliterFormInputs: fliterFormInputs,\n      ...page,\n      matchData,\n      searchFilterInfo: this.searchFilterInfo,\n      dataNumSelect: this.dataNumSelect,\n      handlePagination: this.handlePagination,\n      onSave: this.onSave,\n      onCancel: this.onCancel,\n    });\n    return (\n      <div className=\"demoPadding\">\n        <RefMultipleTableWithInput\n          {...childrenProps}\n          filterUrl={'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/blobRefTreeGrid'}\n          {\n          ...getFieldProps('table2', {\n            // initialValue: value,\n            rules: [{\n              message: '请输入姓名',\n              pattern: /[^{\"refname\":\"\",\"refpk\":\"\"}|{\"refpk\":\"\",\"refname\":\"\"}]/\n            }]\n          })\n          }\n          // disabled  //新增属性\n          // menuIcon={<span className={`uf uf-search`}> </span>} //新增属性\n          // paginationProps={{showJump:false}} //新增属性\n        />\n        <Button colors=\"primary\" onClick={\n          ()=>{\n            this.props.form.validateFields((err, values) => {\n              if(err){\n                alert(\"\"+JSON.stringify(err));\n                return false;\n              }\n              alert(\"\"+JSON.stringify(values))\n            });\n          }\n        }>提交</Button>\n        <span className='error'>\n          {getFieldError('table2')}\n        </span>\n      </div>\n    )\n  }\n}\n\n\n\n","desc":" RefMultipleTableWithInput, `multiple`多选、`fliterFormInputs`复杂搜索。"},{"example":<Demo3 />,"title":" 基础示例3","code":"/**\n *\n * @title 基础示例3\n * @description 清空功能：搭配form。同时注意两个特殊展示：1.matchData数据项不全在已选择下展示 2.保存操作之后，input展示与inputDisplay有关\n *\n */\nimport React, { Component } from 'react';\nimport { RefMultipleTableWithInput, SearchPanelItem } from '../../src/index';\nimport '../../src/index.less';\nimport { Button, Form, FormControl } from 'tinper-bee';\nimport request from './request';\nlet options = {}\nclass Demo3 extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showLoading: false,\n      showModal: false,\n      matchData: [\n        {\n          \"mobile\": \"15011430235\",\n          \"name\": \"人员5\",\n          \"refpk\": \"5e3a85ec-5e14-4734-8b3a-1e6168426c89\",\n          \"refname\": \"人员5\",\n          \"email\": \"55@26.com\"\n        },\n        {\n          \"code\": \"008\",\n          \"name\": \"人员8\",\n          \"refpk\": \"a9f4c869-ca0b-4d12-847e-00eca08bfef6\",\n          \"id\": \"a9f4c869-ca0b-4d12-847e-00eca08bfef6\",\n          \"refname\": \"人员8\",\n          \"email\": \"55@556.com\"\n        }\n      ],\n      value: '{\"refname\":\"人员5-自定义;人员8\",\"refpk\":\"5e3a85ec-5e14-4734-8b3a-1e6168426c89;a9f4c869-ca0b-4d12-847e-00eca08bfef6\"}',\n      valueField: 'refpk',\n      displayField: '哈哈-{refname}-{refcode}-displayField',\n      inputDisplay:'哈哈-{refname}inputDisplay',\n    };\n    this.page = {\n      pageCount: 0,\n      pageSize: 10,\n      currPageIndex: 1,\n    };\n    this.tableData = [];\n    this.columnsData = [];\n    this.fliterFormInputs = [];\n\n  }\n  componentDidMount() {\n    this.loadData();\n  }\n  /**\n   * @msg: 请求mock数据，包含表头数据和表体数据\n   * @param {type} \n   * @return: \n   */\n  loadData = async () => {\n    let refModelUrl = {\n      tableBodyUrl: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/blobRefTreeGrid',//表体请求\n      refInfo: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/refInfo',//表头请求\n    }\n    let requestList = [\n      request(refModelUrl.refInfo, { method: 'get' }),//表头数据\n      request(refModelUrl.tableBodyUrl, { method: 'get' }), //表体数据\n    ];\n    Promise.all(requestList).then(([columnsData, bodyData]) => {\n      this.launchTableHeader(columnsData);\n      this.launchTableData(bodyData);\n      this.setState({\n        showLoading: false\n      });\n    }).catch((e) => {\n      this.launchTableHeader({});\n      this.launchTableData({});\n      this.setState({\n        showLoading: false\n      });\n      console.log(e)\n    });;\n  }\n  /**\n * 根据 refinfo 返回结果拆解并渲染表格表头\n * @param {object} data \n   * 注意：单选时候自己添加radio\n */\n  launchTableHeader = (data) => {\n    if (!data) return;\n    let keyList = data.strFieldCode || [];\n    let titleList = data.strFieldName || [];\n    let colunmsList = keyList.map((item, index) => {\n      this.fliterFormInputs.push(\n        <SearchPanelItem key={item} name={item} text={titleList[index]}>\n          <FormControl size={'sm'} />\n        </SearchPanelItem>\n      )\n      return {\n        key: item,\n        dataIndex: item,\n        title: titleList[index]\n      }\n    });\n    if (colunmsList.length === 0) {\n      colunmsList = [{ title: \"未传递表头数据\", dataIndex: \"nodata\", key: \"nodata\" }];\n    }\n    this.columnsData = colunmsList;\n  }\n\t/**\n\t * 处理并渲染表格数据\n\t */\n  launchTableData = (response) => {\n    if (!response) return;\n    let { valueField } = options;\n    let { data = [], page = {} } = response;\n    data.map((record, k) => {\n      record.key = record[valueField];\n      return record;\n    });\n    this.tableData = data;\n    this.page = {\n      pageCount: page.pageCount || 0,\n      currPageIndex: page.currPageIndex + 1 || 0,\n      totalElements: page.totalElements || 0\n    }\n  }\n  /**\n   * @msg: 简单搜索的回调，与复杂搜索的回调不是同一个\n   * @param {type} \n   * @return: \n   */\n  searchFilterInfo = (value) => {\n    alert('搜索' + JSON.stringify(value))\n  }\n\n  /**\n   * 跳转到制定页数的操作\n   * @param {number} index 跳转页数\n   */\n  handlePagination = (index) => {\n    this.page.currPageIndex = index;\n    this.setState({ number: Math.random() })\n  }\n\t/**\n\t * 选择每页数据个数\n\t */\n  dataNumSelect = (index, pageSize) => {\n    console.log(index, pageSize)\n  }\n  /**\n   * @msg: modal框确认按钮\n   * @param {type} \n   * @return: \n   */\n  onSave = (item) => {\n    this.checkedArray = item;\n    this.setState({\n      showModal: false,\n      matchData: item,\n    })\n  }\n  /**\n   * @msg: modal框右上X和右下角取消\n   * @param {type} \n   * @return: \n   */\n  onCancel = () => {\n    this.setState({ showModal: false })\n  }\n  /**\n   * @msg: 清空操作，借助form。就是value和matchData置空。前者对应input框，matchData对应表中选中的节点\n   * @param {type} \n   * @return: \n   */\n  clearFunc = () =>{\n    this.setState({\n        matchData:[],\n    },()=>{\n        this.props.form.setFieldsValue({table3:''});\n    })\n  }\n\n  render() {\n    let { getFieldProps, getFieldError } = this.props.form;\n    let { showLoading, showModal, matchData, value ,valueField,inputDisplay,displayField} = this.state;\n    let { columnsData, tableData, page, fliterFormInputs } = this;\n    options = {\n      miniSearch: false,\n      multiple: true,\n      emptyBut: true\n    }\n    let childrenProps = Object.assign({}, options, {\n      showModal: showModal,\n      showLoading: showLoading,\n      columnsData: columnsData,\n      tableData: tableData,\n      fliterFormInputs: fliterFormInputs,\n      ...page,\n      matchData,\n      searchFilterInfo: this.searchFilterInfo,\n      dataNumSelect: this.dataNumSelect,\n      handlePagination: this.handlePagination,\n      onSave: this.onSave,\n      onCancel: this.onCancel,\n    });\n    return (\n      <div className=\"demoPadding\">\n        <RefMultipleTableWithInput\n          {...childrenProps}\n\n          valueField={valueField}\n          inputDisplay={inputDisplay}\n          displayField={displayField}\n\n          filterUrl={'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/blobRefTreeGrid'}\n          {\n          ...getFieldProps('table3', {\n            initialValue: value,\n            rules: [{\n              message: '请输入姓名',\n              pattern: /[^{\"refname\":\"\",\"refpk\":\"\"}|{\"refpk\":\"\",\"refname\":\"\"}]/\n            }]\n          })\n          }\n        />\n        <Button\n          colors=\"primary\"\n          onClick={this.clearFunc}>清空</Button>\n        <span className='error'>\n          {getFieldError('table3')}\n        </span>\n      </div>\n    )\n  }\n}\n\n\n\n","desc":" 清空功能：搭配form。同时注意两个特殊展示：1.matchData数据项不全在已选择下展示 2.保存操作之后，input展示与inputDisplay有关"},{"example":<Demo4 />,"title":" 基础示例4","code":"/**\n *\n * @title 基础示例4\n * @description 清空功能：不使用form表单\n *\n */\nimport React, { Component } from 'react';\nimport { RefMultipleTableWithInput } from '../../src/index';\nimport '../../src/index.less';\nimport { Button } from 'tinper-bee';\nimport Radio from 'bee-radio';\nimport 'bee-radio/build/Radio.css';\nimport request from './request';\nlet options = {}\nclass Demo4 extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showLoading: false,\n      showModal: false,\n      matchData: [\n      ],\n      value:'',\n    };\n    this.page = {\n      pageCount: 0,\n      pageSize: 10,\n      currPageIndex: 1,\n    };\n    this.tableData = [];\n    this.columnsData = [];\n\n  }\n\n  componentDidMount(){\n    this.loadData()\n  }\n\n  /**\n   * @msg: 请求mock数据，包含表头数据和表体数据\n   * @param {type} \n   * @return: \n   */\n  loadData = async () => {\n    let refModelUrl = {\n      tableBodyUrl: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/blobRefTreeGrid',//表体请求\n      refInfo: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/refInfo',//表头请求\n    }\n    let requestList = [\n      request(refModelUrl.refInfo, { method: 'get' }),//表头数据\n      request(refModelUrl.tableBodyUrl, { method: 'get' }), //表体数据\n    ];\n    Promise.all(requestList).then(([columnsData, bodyData]) => {\n      this.launchTableHeader(columnsData);\n      this.launchTableData(bodyData);\n      this.setState({\n        showLoading: false\n      });\n    }).catch((e) => {\n      this.launchTableHeader({});\n      this.launchTableData({});\n      this.setState({\n        showLoading: false\n      });\n      console.log(e)\n    });;\n  }\n  /**\n * 根据 refinfo 返回结果拆解并渲染表格表头\n * @param {object} data \n   * 注意：单选时候自己添加radio\n */\n  launchTableHeader = (data) => {\n    if (!data) return;\n    let { multiple, valueField } = options;\n    let keyList = data.strFieldCode || [];\n    let titleList = data.strFieldName || [];\n    let colunmsList = keyList.map((item, index) => {\n      return {\n        key: item,\n        dataIndex: item,\n        title: titleList[index]\n      }\n    });\n    if (colunmsList.length === 0) {\n      colunmsList = [{ title: \"未传递表头数据\", dataIndex: \"nodata\", key: \"nodata\" }];\n    } else if (!multiple) {\n      colunmsList.unshift({\n        title: \" \",\n        dataIndex: \"a\",\n        key: \"a\",\n        width: 45,\n        render(text, record, index) {\n          return (\n            <Radio.RadioGroup\n              name={record[valueField]}\n              selectedValue={record._checked ? record[valueField] : null}\n            >\n              <Radio value={record[valueField]}></Radio>\n            </Radio.RadioGroup>\n          )\n        }\n      })\n    }\n    this.columnsData = colunmsList\n\n  }\n\t/**\n\t * 处理并渲染表格数据\n\t */\n  launchTableData = (response) => {\n    if (!response) return;\n    let { valueField } = options;\n    let { data = [], page = {} } = response;\n    data.map((record, k) => {\n      record.key = record[valueField];\n      return record;\n    });\n    this.tableData = data;\n    this.page = {\n      pageCount: page.pageCount || 0,\n      currPageIndex: page.currPageIndex + 1 || 0,\n      totalElements: page.totalElements || 0\n    }\n  }\n  /**\n   * @msg: 简单搜索的回调，与复杂搜索的回调不是同一个\n   * @param {type} \n   * @return: \n   */\n  miniSearchFunc = (value) => {\n    alert('搜索' + value)\n  }\n\n  /**\n   * 跳转到制定页数的操作\n   * @param {number} index 跳转页数\n   */\n  handlePagination = (index) => {\n    this.page.currPageIndex = index;\n    this.setState({ number: Math.random() })\n  }\n\t/**\n\t * 选择每页数据个数\n\t */\n  dataNumSelect = (index, pageSize) => {\n    console.log(index, pageSize)\n  }\n  /**\n   * @msg: modal框确认按钮\n   * @param {type} \n   * @return: \n   */\n  onSave = (item) => {\n    this.checkedArray = item;\n    this.setState({\n      showModal: false,\n      matchData: item,\n    })\n  }\n  /**\n   * @msg: modal框右上X和右下角取消\n   * @param {type} \n   * @return: \n   */\n  onCancel = () => {\n    this.setState({ showModal: false })\n  }\n\n  /**\n   * @msg: 清空操作\n   * @param {type} 此时value不可以直接传'',因为''下只能清除一次，第二次清除时前后value都是''，不会触发更新操作，\n   * 因此通过refpk不一致来触发更新操作\n   * @return: \n   */\n  clearFunc = () => {\n    this.setState({\n      matchData: [],\n      value: `{\"refname\":\"\",\"refpk\":\"${Math.random()}\"}`,\n    })\n  }\n  render() {\n    let { showLoading, showModal, matchData,value } = this.state;\n    let { columnsData, tableData, page } = this;\n    options = {\n      miniSearch: true,\n      multiple: false,\n      valueField: \"refpk\",\n      displayField: \"{refname}\",\n    }\n    let childrenProps = Object.assign({}, options, {\n      showModal: showModal,\n      showLoading: showLoading,\n      columnsData: columnsData,\n      tableData: tableData,\n      ...page,\n      matchData,\n      value,\n      miniSearchFunc: this.miniSearchFunc,\n      dataNumSelect: this.dataNumSelect,\n      handlePagination: this.handlePagination,\n      onSave: this.onSave,\n      onCancel: this.onCancel,\n    });\n    return (\n      <div className=\"demoPadding\">\n        <RefMultipleTableWithInput\n          {...childrenProps}\n          filterUrl={'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/blobRefTreeGrid'}\n        />\n        <Button\n          colors=\"primary\"\n          onClick={this.clearFunc}>清空</Button>\n      </div>\n    )\n  }\n}\n\n\n\n","desc":" 清空功能：不使用form表单"},{"example":<Demo5 />,"title":" 基础示例2","code":"/**\n *\n * @title 基础示例2\n * @description RefMultipleTableWithInput, `multiple`多选、`fliterFormInputs`复杂搜索。\n *\n */\nimport React, { Component } from 'react';\nimport { RefMultipleTableWithInput, SearchPanelItem } from '../../src/index';\nimport '../../src/index.less';\nimport { Button, Form, FormControl } from 'tinper-bee';\nimport request from './request';\nlet options = {}\nclass Demo2 extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showLoading: false,\n      showModal: false,\n      matchData: [\n        {\n          \"code\":\"005\",\n          \"mobile\": \"15011430235\",\n          \"name\": \"人员5\",\n          \"refpk\": \"5e3a85ec-5e14-4734-8b3a-1e6168426c89\",\n          \"refname\": \"人员5\",\n          \"email\": \"55@26.com\"\n        }\n      ],\n      value: '{\"refname\":\"人员5-自定义\",\"refpk\":\"5e3a85ec-5e14-4734-8b3a-1e6168426c89\"}',\n    };\n    this.page = {\n      pageCount: 0,\n      pageSize: 10,\n      currPageIndex: 1,\n    };\n    this.tableData = [];\n    this.columnsData = [];\n    this.fliterFormInputs = [];\n\n  }\n  componentDidMount() {\n    this.loadData();\n    this.props.form.setFieldsValue({\n      ['table2']:this.state.value\n    });\n    setTimeout(() => {\n      this.setState({\n        matchData: [\n          {\n            \"code\":\"005\",\n            \"mobile\": \"15011430235\",\n            \"name\": \"人员7\",\n            \"refpk\": \"394bba90-ed0f-4794-a44e-fd9ce6e9257d\",\n            \"refname\": \"人员5\",\n            \"email\": \"55@26.com\"\n          }\n        ]\n      })\n      this.props.form.setFieldsValue({\n        ['table2']: '{\"refname\":\"人员7-自定义\",\"refpk\":\"394bba90-ed0f-4794-a44e-fd9ce6e9257d\"}',\n      });\n    }, 14000);\n  }\n  /**\n   * @msg: 请求mock数据，包含表头数据和表体数据\n   * @param {type} \n   * @return: \n   */\n  loadData = async () => {\n    let refModelUrl = {\n      tableBodyUrl: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/blobRefTreeGrid',//表体请求\n      refInfo: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/refInfo',//表头请求\n    }\n    let requestList = [\n      request(refModelUrl.refInfo, { method: 'get' }),//表头数据\n      request(refModelUrl.tableBodyUrl, { method: 'get' }), //表体数据\n    ];\n    Promise.all(requestList).then(([columnsData, bodyData]) => {\n      this.launchTableHeader(columnsData);\n      this.launchTableData(bodyData);\n      this.setState({\n        showLoading: false\n      });\n    }).catch((e) => {\n      this.launchTableHeader({});\n      this.launchTableData({});\n      this.setState({\n        showLoading: false\n      });\n      console.log(e)\n    });;\n  }\n  /**\n * 根据 refinfo 返回结果拆解并渲染表格表头\n * @param {object} data \n   * 注意：单选时候自己添加radio\n */\n  launchTableHeader = (data) => {\n    if (!data) return;\n    let keyList = data.strFieldCode || [];\n    let titleList = data.strFieldName || [];\n    let colunmsList = keyList.map((item, index) => {\n      this.fliterFormInputs.push(\n        <SearchPanelItem key={item} name={item} text={titleList[index]}>\n          <FormControl size={'sm'} />\n        </SearchPanelItem>\n      )\n      return {\n        key: item,\n        dataIndex: item,\n        title: titleList[index]\n      }\n    });\n    if (colunmsList.length === 0) {\n      colunmsList = [{ title: \"未传递表头数据\", dataIndex: \"nodata\", key: \"nodata\" }];\n    }\n    this.columnsData = colunmsList;\n  }\n\t/**\n\t * 处理并渲染表格数据\n\t */\n  launchTableData = (response) => {\n    if (!response) return;\n    let { valueField } = options;\n    let { data = [], page = {} } = response;\n    data.map((record, k) => {\n      record.key = record[valueField];\n      return record;\n    });\n    this.tableData = data;\n    this.page = {\n      pageCount: page.pageCount || 0,\n      currPageIndex: page.currPageIndex + 1 || 0,\n      totalElements: page.totalElements || 0\n    }\n  }\n  /**\n   * @msg: 简单搜索的回调，与复杂搜索的回调不是同一个\n   * @param {type} \n   * @return: \n   */\n  searchFilterInfo = (value) => {\n    alert('搜索' + JSON.stringify(value))\n  }\n\n  /**\n   * 跳转到制定页数的操作\n   * @param {number} index 跳转页数\n   */\n  handlePagination = (index) => {\n    this.page.currPageIndex = index;\n    this.setState({ number: Math.random() })\n  }\n\t/**\n\t * 选择每页数据个数\n\t */\n  dataNumSelect = (index, pageSize) => {\n    console.log(index, pageSize)\n  }\n  /**\n   * @msg: modal框确认按钮\n   * @param {type} \n   * @return: \n   */\n  onSave = (item) => {\n    this.checkedArray = item;\n    this.setState({\n      showModal: false,\n      matchData: item,\n    })\n  }\n  /**\n   * @msg: modal框右上X和右下角取消\n   * @param {type} \n   * @return: \n   */\n  onCancel = () => {\n    this.setState({ showModal: false })\n  }\n\n  render() {\n    let { getFieldProps, getFieldError } = this.props.form;\n    let { showLoading, showModal, matchData, value } = this.state;\n    let { columnsData, tableData, page, fliterFormInputs } = this;\n    options = {\n      miniSearch: false,\n      multiple: true,\n      valueField: \"refpk\",\n      displayField: \"{code}-大前端{name}\",\n      emptyBut: true\n    }\n    let childrenProps = Object.assign({}, options, {\n      showModal: showModal,\n      showLoading: showLoading,\n      columnsData: columnsData,\n      tableData: tableData,\n      fliterFormInputs: fliterFormInputs,\n      ...page,\n      matchData,\n      searchFilterInfo: this.searchFilterInfo,\n      dataNumSelect: this.dataNumSelect,\n      handlePagination: this.handlePagination,\n      onSave: this.onSave,\n      onCancel: this.onCancel,\n    });\n    return (\n      <div className=\"demoPadding\">\n        <RefMultipleTableWithInput\n          {...childrenProps}\n          filterUrl={'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/blobRefTreeGrid'}\n          {\n          ...getFieldProps('table2', {\n            // initialValue: value,\n            rules: [{\n              message: '请输入姓名',\n              pattern: /[^{\"refname\":\"\",\"refpk\":\"\"}|{\"refpk\":\"\",\"refname\":\"\"}]/\n            }]\n          })\n          }\n          // disabled  //新增属性\n          // menuIcon={<span className={`uf uf-search`}> </span>} //新增属性\n          // paginationProps={{showJump:false}} //新增属性\n        />\n        <Button colors=\"primary\" onClick={\n          ()=>{\n            this.props.form.validateFields((err, values) => {\n              if(err){\n                alert(\"\"+JSON.stringify(err));\n                return false;\n              }\n              alert(\"\"+JSON.stringify(values))\n            });\n          }\n        }>提交</Button>\n        <span className='error'>\n          {getFieldError('table2')}\n        </span>\n      </div>\n    )\n  }\n}\n\n\n\n","desc":" RefMultipleTableWithInput, `multiple`多选、`fliterFormInputs`复杂搜索。"}]


class Demo extends Component {
    constructor(props){
        super(props);
        this.state = {
            open: false
        }
    }
    handleClick=()=> {
        this.setState({ open: !this.state.open })
    }
    fCloseDrawer=()=>{
        this.setState({
            open: false
        })
    }

    render () {
        const { title, example, code, desc, scss_code  } = this.props;

        const header = (
            <div>
                <p className='component-title'>{ title }</p>
                <p>{ desc }</p>
                <span className='component-code' onClick={this.handleClick}> 查看源码 <i className='uf uf-arrow-right'/> </span>
            </div>
        );
        return (
            <Col md={12} id={title.trim()} className='component-demo'>
            <Panel header={header}>
                {example}
            </Panel>
           
            <Drawer className='component-drawerc' title={title} show={this.state.open} placement='right' onClose={this.fCloseDrawer}>
            <div className='component-code-copy'> JS代码 
                <Clipboard action="copy" text={code}/>
            </div>
            <pre className="pre-js">
                <code className="hljs javascript">{ code.replace('../../src/index.less',COMPONENT+'/lib/index.css').replace('../../src/index.js',COMPONENT).replace('../../src/index',COMPONENT).replace('../../src',COMPONENT) }</code>
            </pre >
            {!!scss_code ?<div className='component-code-copy copy-css'> SCSS代码 
                <Clipboard action="copy" text={scss_code}/>
            </div>:null }
                { !!scss_code ? <pre className="pre-css">
                 <code className="hljs css">{ scss_code }</code>
                 </pre> : null }
            </Drawer>
        </Col>
    )
    }
}

class DemoGroup extends Component {
    constructor(props){
        super(props)
    }
    render () {
        return (
            <Row>
            {DemoArray.map((child,index) => {

                return (
            <Demo example= {child.example} title= {child.title} code= {child.code} scss_code= {child.scss_code} desc= {child.desc} key= {index}/>
    )

    })}
    </Row>
    )
    }
}

ReactDOM.render(<DemoGroup/>, document.getElementById('root'));
