import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import { Con, Row, Col } from 'bee-layout';
import { Panel } from 'bee-panel';
import Drawer from 'bee-drawer';
import Clipboard from 'bee-clipboard'; 
import './demo.scss';


import Demo1 from "./demolist/Demo1";import Demo2 from "./demolist/Demo2";import Demo3 from "./demolist/Demo3";import Demo4 from "./demolist/Demo4";
var DemoArray = [{"example":<Demo1 />,"title":" 基础示例1","code":"/**\n *\n * @title 基础示例1\n * @description RefTreeTableBaseUI,`multiple`单选,`miniSearch`简单搜索。注意单选展示radio需要手动封装\n *\n */\n\nimport React, { Component } from 'react';\nimport RefTreeTableBaseUI from '../../src/index';\nimport '../../src/index.less';\nimport { Button } from 'tinper-bee';\nimport Radio from 'bee-radio';\nimport 'bee-radio/build/Radio.css';\nimport request from './request';\nlet options = {};\nclass Demo1 extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showModal: false,\n      showLoading: false,\n      searchValue: '',\n      value: '',\n      matchData: [],\n    }\n    this.page = {\n      pageCount: 1,//总页数\n      pageSize: '10',//每页数据数\n      totalElements: 9,\n      currPageIndex: 0,\n    };\n\n  }\n  /**\n   * @msg: 请求mock数据，包含三项：树 表头 表体的数据\n   * @param {type} \n   * @return: \n   */\n  loadData = () => {\n    if (!this.state.showLoading) {\n      this.setState({ showLoading: true })\n    }\n    let refModelUrl = {\n      treeUrl: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/blobRefTree',\n      refInfo: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/refInfo',//表头请求\n      tableBodyUrl: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/blobRefTreeGrid',//表体请求\n    };\n    let requestList = [\n      request(refModelUrl.treeUrl, {\n        method: 'get',\n      }),\n      request(refModelUrl.refInfo, {\n        method: 'get',\n      }),\n      request(refModelUrl.tableBodyUrl, {\n        method: 'get',\n        'refClientPageInfo.currPageIndex': this.page.currPageIndex - 1,\n        'refClientPageInfo.pageSize': this.page.pageSize,\n        content: this.state.searchValue,\n      }),\n    ];\n\n    Promise.all(requestList).then(([treeData, columnsData, bodyData]) => {\n      this.getTreeData(treeData)\n      this.launchTableHeader(columnsData);\n      if (bodyData) {\n        this.launchTableData(bodyData);\n      }\n      this.setState({\n        showLoading: false\n      });\n    }).catch((e) => {\n      this.launchTableHeader({});\n      this.launchTableData({});\n      this.setState({\n        showLoading: false\n      });\n      console.log(e)\n    });;\n  }\n  /**\n   * @msg: 根据treeUrl获取树数据\n   * @param {type} \n   * @return: \n   */\n  getTreeData = (res) => {\n    let { data } = res;\n    if (data && data.length > 0) {\n      this.treeData = data;\n    } else {\n      this.treeData = [];\n    }\n  }\n\n  /**\n   * 根据 refinfo 返回结果拆解并渲染表格表头\n   * @param {object} data \n   */\n  launchTableHeader = (data) => {\n    if (!data) return;\n    let { multiple, valueField } = options;\n    let keyList = data.strFieldCode || [];\n    let titleList = data.strFieldName || [];\n    let colunmsList = keyList.map((item, index) => {\n      return {\n        key: item,\n        dataIndex: item,\n        title: titleList[index]\n      }\n    });\n    if (colunmsList.length === 0) {\n      colunmsList = [{ title: \"未传递表头数据\", dataIndex: \"nodata\", key: \"nodata\" }];\n\n    } else if (!multiple) {\n      //单选时用对号符号标记当前行选中\n      colunmsList.unshift({\n        title: \" \",\n        dataIndex: \"a\",\n        key: \"a\",\n        width: 45,\n        render(text, record, index) {\n          return (\n            <Radio.RadioGroup\n              name={record[valueField]}\n              selectedValue={record._checked ? record[valueField] : null}\n            >\n              <Radio value={record[valueField]}></Radio>\n            </Radio.RadioGroup>\n          )\n        }\n      })\n\n    }\n    this.columnsData = colunmsList;\n  }\n\n\t/**\n\t * 处理并渲染表格数据\n\t */\n  launchTableData = (response) => {\n    if (!response) return;\n    let { valueField } = options;\n    let { data = [], page = {} } = response;\n    data.map((record, k) => {\n      record.key = record[valueField];\n      return record;\n    });\n    this.tableData = data;\n    this.originTableData = data;//这个没有用处，只是为了生成假数据\n    this.page = {\n      pageCount: page.pageCount || 0,\n      currPageIndex: page.currPageIndex || 0,\n      totalElements: page.totalElements || 0,\n    }\n\n  }\n  /**\n   * @msg: 左树点击,record是树的节点信息\n   * @param {type} \n   * @return: \n   */\n  onTreeChange = (record) => {\n    this.tableData = this.originTableData.slice(Math.floor(Math.random() * 8), -1);\n    this.setState({\n      mustRender: Math.random()\n    })\n  }\n  /**\n   * @msg: 左树上的搜索回调\n   * @param {type} \n   * @return: \n   */\n  onTreeSearch = (value) => {\n    alert(value);\n  }\n  /**\n  * @msg: 右表上的搜索回调\n  * @param {type} \n  * @return: \n  */\n  onTableSearch = (value) => {\n    console.log('onTableSearch', value)\n  }\n  loadTableData = (param) => {\n    console.log('loadTableData', param)\n  }\n  /**\n   * @msg: 参照确认按钮的回调\n   * @param {type} \n   * @return: \n   */\n  onSave = (result) => {\n    console.log('save', result)\n    this.setState({\n      showModal: false,\n      matchData: result,\n    })\n  }\n  /**\n   * @msg: 参照弹框右上角X和取消\n   * @param {type} \n   * @return: \n   */\n  onCancel = () => {\n    this.setState({ showModal: false })\n  }\n\n  render() {\n    options = {\n      displayField: '{refname}',\n      valueField: 'refpk',\n      lang: 'zh_CN',\n      miniSearch: true,\n      multiple: false,\n    }\n    return (\n\n      <div className=\"demo-label\">\n        <RefTreeTableBaseUI\n          {...options}\n\n          treeData={this.treeData}\n          columnsData={this.columnsData}\n          tableData={this.tableData}\n          page={this.page}\n          matchData={this.state.matchData}\n\n          showModal={this.state.showModal}\n\n          onTreeChange={this.onTreeChange}\n          onTreeSearch={this.onTreeSearch}\n          onTableSearch={this.onTableSearch}\n          onSave={this.onSave}\n          onCancel={this.onCancel}\n          loadTableData={this.loadTableData}\n\n        />\n        <Button colors=\"primary\" onClick={() => { this.setState({ showModal: true },()=>{this.loadData()}) }}>打开弹框</Button>\n      </div>\n    )\n  }\n};\n\n\n\n\n","desc":" RefTreeTableBaseUI,`multiple`单选,`miniSearch`简单搜索。注意单选展示radio需要手动封装"},{"example":<Demo2 />,"title":" 基础示例2","code":"/**\n *\n * @title 基础示例2\n * @description RefTreeTableWithInput,`multiple`多选\n *\n */\n\nimport React, { Component } from 'react';\nimport { RefTreeTableWithInput } from '../../src/index';\nimport '../../src/index.less';\nimport { Form, Button } from 'tinper-bee';\nimport Radio from 'bee-radio';\nimport 'bee-radio/build/Radio.css';\nimport request from './request';\nlet options = {};\nclass Demo2 extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showLoading: false,\n      searchValue: '',\n      matchData: [\n        {\n        \"rownum_\":3,\n        \"code\":\"003\",\n        \"mobile\":\"15011430232\",\n        \"name\":\"人员3\",\n        \"refcode\":\"003\",\n        \"refpk\":\"004989bb-a705-45ce-88f3-662f87ee6e52\",\n        \"id\":\"004989bb-a705-45ce-88f3-662f87ee6e52\",\n        \"refname\":\"人员3\",\n        \"email\":\"33@33.com\"\n        }\n      ],\n      value: '{\"refname\":\"人员3-初始value\",\"refpk\":\"004989bb-a705-45ce-88f3-662f87ee6e52\"}',\n      displayField:'{refname}-{refcode}-displayField',\n      valueField:'refpk',\n    }\n    this.page = {\n      pageCount: 1,//总页数\n      pageSize: '10',//每页数据数\n      totalElements: 9,\n      currPageIndex: 0,\n    };\n\n  }\n  /**\n   * @msg: 点击input右侧menu icon才触发的操作。return true是必须的\n   * @param {type} \n   * @return: \n   */\n  canClickGoOn = () =>{\n    this.loadData();\n    return true;\n  }\n\n  /**\n   * @msg: 请求mock数据，包含三项：树 表头 表体的数据\n   * @param {type} \n   * @return: \n   */\n  loadData = () => {\n    if (!this.state.showLoading) {\n      this.setState({ showLoading: true })\n    }\n    let refModelUrl = {\n      treeUrl: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/blobRefTree',\n      refInfo: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/refInfo',//表头请求\n      tableBodyUrl: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/blobRefTreeGrid',//表体请求\n    };\n    let requestList = [\n      request(refModelUrl.treeUrl, {\n        method: 'get',\n      }),\n      request(refModelUrl.refInfo, {\n        method: 'get',\n      }),\n      request(refModelUrl.tableBodyUrl, {\n        method: 'get',\n        'refClientPageInfo.currPageIndex': this.page.currPageIndex - 1,\n        'refClientPageInfo.pageSize': this.page.pageSize,\n        content: this.state.searchValue,\n      }),\n    ];\n\n    Promise.all(requestList).then(([treeData, columnsData, bodyData]) => {\n      this.getTreeData(treeData)\n      this.launchTableHeader(columnsData);\n      if (bodyData) {\n        this.launchTableData(bodyData);\n      }\n      this.setState({\n        showLoading: false\n      });\n    }).catch((e) => {\n      this.launchTableHeader({});\n      this.launchTableData({});\n      this.setState({\n        showLoading: false\n      });\n      console.log(e)\n    });;\n  }\n   /**\n   * @msg: 根据treeUrl获取树数据\n   * @param {type} \n   * @return: \n   */\n  getTreeData = (res) => {\n    let { data } = res;\n    if (data && data.length > 0) {\n      this.treeData = data;\n    } else {\n      this.treeData = [];\n    }\n  }\n  /**\n * 根据 refinfo 返回结果拆解并渲染表格表头\n * @param {object} data \n */\n  launchTableHeader = (data) => {\n    if (!data) return;\n    let { multiple, valueField } = options;\n    let keyList = data.strFieldCode || [];\n    let titleList = data.strFieldName || [];\n    let colunmsList = keyList.map((item, index) => {\n      return {\n        key: item,\n        dataIndex: item,\n        title: titleList[index]\n      }\n    });\n    if (colunmsList.length === 0) {\n      colunmsList = [{ title: \"未传递表头数据\", dataIndex: \"nodata\", key: \"nodata\" }];\n\n    } \n    this.columnsData = colunmsList;\n  }\n\t/**\n\t * 处理并渲染表格数据\n\t */\n  launchTableData = (response) => {\n    if (!response) return;\n    let { valueField } = options;\n    let { data = [], page = {} } = response;\n    data.map((record, k) => {\n      record.key = record[valueField];\n      return record;\n    });\n    this.tableData = data;\n    this.originTableData = data;//这个没有用处，只是为了生成假数据\n    this.page = {\n      pageCount: page.pageCount || 0,\n      currPageIndex: page.currPageIndex || 0,\n      totalElements: page.totalElements || 0,\n    }\n\n  }\n  /**\n   * @msg: 左树点击,record是树的节点信息\n   * @param {type} \n   * @return: \n   */\n  onTreeChange = (record) => {\n    this.tableData = this.originTableData.slice(Math.floor(Math.random() * 8), -1);\n    this.setState({\n      mustRender: Math.random()\n    })\n  }\n  /**\n   * @msg: 左树上的搜索回调\n   * @param {type} \n   * @return: \n   */\n  onTreeSearch = (value) => {\n    alert(value);\n  }\n  /**\n  * @msg: 右表上的搜索回调\n  * @param {type} \n  * @return: \n  */\n  onTableSearch = (value) => {\n    console.log('onTableSearch', value)\n  }\n  loadTableData = (param) => {\n    console.log('loadTableData', param)\n  }\n  /**\n   * @msg: 参照确认按钮的回调\n   * @param {type} \n   * @return: \n   */\n  onSave = (result) => {\n    console.log('save', result)\n    this.setState({\n      matchData: result,\n    })\n  }\n \n  render() {\n    options = {\n      lang: 'zh_CN',\n      miniSearch: true,\n      multiple: true,\n      isLocalSearch:true,\n    }\n    const {value , matchData,displayField,valueField} = this.state;\n    const { getFieldProps, getFieldError } = this.props.form;\n    return (\n      <div className=\"demo-label\">\n        <RefTreeTableWithInput\n          {...options}\n          displayField={displayField}\n          valueField={valueField}\n          treeData={this.treeData}\n          columnsData={this.columnsData}\n          tableData={this.tableData}\n          page={this.page}\n          matchData={this.state.matchData}\n\n\n          canClickGoOn={this.canClickGoOn}\n\n          onTreeChange={this.onTreeChange}\n          onTreeSearch={this.onTreeSearch}\n          onTableSearch={this.onTableSearch}\n          onSave={this.onSave}\n          onCancel={this.onCancel}\n          loadTableData={this.loadTableData}\n\n          filterUrl={'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/blobRefTreeGrid'}\n\n          {...getFieldProps('treeTable2', {\n            initialValue: value,\n            rules: [{\n              message: '提示：请选择',\n              pattern: /[^{\"refname\":\"\",\"refpk\":\"\"}|{\"refpk\":\"\",\"refname\":\"\"}]/\n            }]\n          })}\n\n        />\n        <Button colors=\"primary\" onClick={\n          ()=>{\n            this.props.form.validateFields((err, values) => {\n              if(err){\n                alert(\"\"+JSON.stringify(err));\n                return false;\n              }\n              alert(\"\"+JSON.stringify(values))\n            });\n          }\n        }>提交</Button>\n        <span  className=\"error\"style={{\n          color: 'red'\n        }}>\n          {\n            getFieldError('treeTable2')\n          }\n        </span>\n      </div>\n    )\n  }\n};\n\n\n\n\n","desc":" RefTreeTableWithInput,`multiple`多选"},{"example":<Demo3 />,"title":" 基础示例3","code":"/**\n *\n * @title 基础示例3\n * @description 清空功能：搭配form校验。同时注意两个特殊展示：1.matchData数据项不全在已选择下展示 2.保存操作之后，input展示与inputDisplay有关\n *\n */\n\nimport React, { Component } from 'react';\nimport { RefTreeTableWithInput } from '../../src/index';\nimport '../../src/index.less';\nimport { Form, Button } from 'tinper-bee';\nimport Radio from 'bee-radio';\nimport 'bee-radio/build/Radio.css';\nimport request from './request';\nlet options = {};\nclass Demo3 extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showLoading: false,\n      searchValue: '',\n      matchData: [\n        {\n          \"mobile\": \"15011430235\",\n          \"name\": \"人员5\",\n          \"refpk\": \"5e3a85ec-5e14-4734-8b3a-1e6168426c89\",\n          \"refname\": \"人员5\",\n          \"email\": \"55@26.com\"\n        },\n        {\n          \"code\": \"008\",\n          \"name\": \"人员8\",\n          \"refpk\": \"a9f4c869-ca0b-4d12-847e-00eca08bfef6\",\n          \"id\": \"a9f4c869-ca0b-4d12-847e-00eca08bfef6\",\n          \"refname\": \"人员8\",\n          \"email\": \"55@556.com\"\n        }\n      ],\n      value: '{\"refname\":\"人员5-自定义;人员8\",\"refpk\":\"5e3a85ec-5e14-4734-8b3a-1e6168426c89;a9f4c869-ca0b-4d12-847e-00eca08bfef6\"}',\n      valueField: 'refpk',\n      displayField: '哈哈-{refname}啦{refcode}',\n      inputDisplay:'哈哈-{refname}inputDisplay',\n      nodeDisplay: '哈哈-{refname}-{refcode}-nodeDisplay'\n\n    }\n    this.page = {\n      pageCount: 1,//总页数\n      pageSize: '10',//每页数据数\n      totalElements: 9,\n      currPageIndex: 0,\n    };\n\n  }\n  /**\n   * @msg: 点击input右侧menu icon才触发的操作。return true是必须的\n   * @param {type} \n   * @return: \n   */\n  canClickGoOn = () =>{\n    this.loadData();\n    return true;\n  }\n\n  /**\n   * @msg: 请求mock数据，包含三项：树 表头 表体的数据\n   * @param {type} \n   * @return: \n   */\n  loadData = () => {\n    if (!this.state.showLoading) {\n      this.setState({ showLoading: true })\n    }\n    let refModelUrl = {\n      treeUrl: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/blobRefTree',\n      refInfo: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/refInfo',//表头请求\n      tableBodyUrl: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/blobRefTreeGrid',//表体请求\n    };\n    let requestList = [\n      request(refModelUrl.treeUrl, {\n        method: 'get',\n      }),\n      request(refModelUrl.refInfo, {\n        method: 'get',\n      }),\n      request(refModelUrl.tableBodyUrl, {\n        method: 'get',\n        'refClientPageInfo.currPageIndex': this.page.currPageIndex - 1,\n        'refClientPageInfo.pageSize': this.page.pageSize,\n        content: this.state.searchValue,\n      }),\n    ];\n\n    Promise.all(requestList).then(([treeData, columnsData, bodyData]) => {\n      this.getTreeData(treeData)\n      this.launchTableHeader(columnsData);\n      if (bodyData) {\n        this.launchTableData(bodyData);\n      }\n      this.setState({\n        showLoading: false\n      });\n    }).catch((e) => {\n      this.launchTableHeader({});\n      this.launchTableData({});\n      this.setState({\n        showLoading: false\n      });\n      console.log(e)\n    });;\n  }\n   /**\n   * @msg: 根据treeUrl获取树数据\n   * @param {type} \n   * @return: \n   */\n  getTreeData = (res) => {\n    let { data } = res;\n    if (data && data.length > 0) {\n      this.treeData = data;\n    } else {\n      this.treeData = [];\n    }\n  }\n  /**\n * 根据 refinfo 返回结果拆解并渲染表格表头\n * @param {object} data \n */\n  launchTableHeader = (data) => {\n    if (!data) return;\n    let { multiple, valueField } = options;\n    let keyList = data.strFieldCode || [];\n    let titleList = data.strFieldName || [];\n    let colunmsList = keyList.map((item, index) => {\n      return {\n        key: item,\n        dataIndex: item,\n        title: titleList[index]\n      }\n    });\n    if (colunmsList.length === 0) {\n      colunmsList = [{ title: \"未传递表头数据\", dataIndex: \"nodata\", key: \"nodata\" }];\n\n    }\n    this.columnsData = colunmsList;\n  }\n\t/**\n\t * 处理并渲染表格数据\n\t */\n  launchTableData = (response) => {\n    if (!response) return;\n    let { valueField } = options;\n    let { data = [], page = {} } = response;\n    data.map((record, k) => {\n      record.key = record[valueField];\n      return record;\n    });\n    this.tableData = data;\n    this.originTableData = data;//这个没有用处，只是为了生成假数据\n    this.page = {\n      pageCount: page.pageCount || 0,\n      currPageIndex: page.currPageIndex || 0,\n      totalElements: page.totalElements || 0,\n    }\n\n  }\n  /**\n   * @msg: 左树点击,record是树的节点信息\n   * @param {type} \n   * @return: \n   */\n  onTreeChange = (record) => {\n    this.tableData = this.originTableData.slice(Math.floor(Math.random() * 8), -1);\n    this.setState({\n      mustRender: Math.random()\n    })\n  }\n  /**\n   * @msg: 左树上的搜索回调\n   * @param {type} \n   * @return: \n   */\n  onTreeSearch = (value) => {\n    alert(value);\n  }\n  /**\n  * @msg: 右表上的搜索回调\n  * @param {type} \n  * @return: \n  */\n  onTableSearch = (value) => {\n    console.log('onTableSearch', value)\n  }\n  loadTableData = (param) => {\n    console.log('loadTableData', param)\n  }\n  /**\n   * @msg: 参照确认按钮的回调\n   * @param {type} \n   * @return: \n   */\n  onSave = (result) => {\n    console.log('save', result)\n    this.setState({\n      matchData: result,\n    })\n  }\n  \n  /**\n   * @msg: 清空参照值的功能，就是value和matchData置空。前者对应input框，matchData对应树中选中的节点\n   * @param {type} \n   * @return: \n   */\n  clearFunc = () =>{\n     \n      this.setState({\n          matchData:[],\n      },()=>{\n          this.props.form.setFieldsValue({treeTable3:''});\n      })\n  }\n  \n  render() {\n    options = {\n     \n      lang: 'zh_CN',\n      miniSearch: true,\n      multiple: true,\n    }\n    const {value , matchData,valueField,displayField,nodeDisplay,inputDisplay} = this.state;\n    const { getFieldProps, getFieldError } = this.props.form;\n    return (\n      <div className=\"demo-label\">\n        <RefTreeTableWithInput\n          {...options}\n          valueField={valueField}\n          displayField={displayField}\n          nodeDisplay={nodeDisplay}\n          inputDisplay ={inputDisplay}\n\n          treeData={this.treeData}\n          columnsData={this.columnsData}\n          tableData={this.tableData}\n          page={this.page}\n          matchData={matchData}\n\n\n          canClickGoOn={this.canClickGoOn}\n\n          onTreeChange={this.onTreeChange}\n          onTreeSearch={this.onTreeSearch}\n          onTableSearch={this.onTableSearch}\n          onSave={this.onSave}\n\n          loadTableData={this.loadTableData}\n\n          filterUrl={'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/blobRefTreeGrid'}\n          {...getFieldProps('treeTable3', {\n            initialValue: value,\n            rules: [{\n              message: '提示：请选择',\n              pattern: /[^{\"refname\":\"\",\"refpk\":\"\"}|{\"refpk\":\"\",\"refname\":\"\"}]/\n            }]\n          })}\n\n        />\n        <Button colors=\"primary\" onClick={this.clearFunc}>清空</Button>\n        <span  className=\"error\"style={{\n          color: 'red'\n        }}>\n          {\n            getFieldError('treeTable3')\n          }\n        </span>\n      </div>\n    )\n  }\n};\n\n\n\n\n","desc":" 清空功能：搭配form校验。同时注意两个特殊展示：1.matchData数据项不全在已选择下展示 2.保存操作之后，input展示与inputDisplay有关"},{"example":<Demo4 />,"title":" 基础示例4","code":"/**\n *\n * @title 基础示例4\n * @description 清空功能：不使用form表单\n *\n */\n\nimport React, { Component } from 'react';\nimport { RefTreeTableWithInput } from '../../src/index';\nimport '../../src/index.less';\nimport { Button } from 'tinper-bee';\nimport Radio from 'bee-radio';\nimport 'bee-radio/build/Radio.css';\nimport request from './request';\nlet options = {};\nclass Demo1 extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showLoading: false,\n      searchValue: '',\n      value: '',\n      matchData: [],\n    }\n    this.page = {\n      pageCount: 1,//总页数\n      pageSize: '10',//每页数据数\n      totalElements: 9,\n      currPageIndex: 0,\n    };\n\n  }\n\n  /**\n   * @msg: 点击input右侧menu icon才触发的操作。return true是必须的\n   * @param {type} \n   * @return: \n   */\n  canClickGoOn = () =>{\n    this.loadData();\n    return true;\n  }\n\n\n  /**\n   * @msg: 请求mock数据，包含三项：树 表头 表体的数据\n   * @param {type} \n   * @return: \n   */\n  loadData = () => {\n    if (!this.state.showLoading) {\n      this.setState({ showLoading: true })\n    }\n    let refModelUrl = {\n      treeUrl: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/blobRefTree',\n      refInfo: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/refInfo',//表头请求\n      tableBodyUrl: 'https://mock.yonyoucloud.com/mock/1264/pap_basedoc/common-ref/blobRefTreeGrid',//表体请求\n    };\n    let requestList = [\n      request(refModelUrl.treeUrl, {\n        method: 'get',\n      }),\n      request(refModelUrl.refInfo, {\n        method: 'get',\n      }),\n      request(refModelUrl.tableBodyUrl, {\n        method: 'get',\n        'refClientPageInfo.currPageIndex': this.page.currPageIndex - 1,\n        'refClientPageInfo.pageSize': this.page.pageSize,\n        content: this.state.searchValue,\n      }),\n    ];\n\n    Promise.all(requestList).then(([treeData, columnsData, bodyData]) => {\n      this.getTreeData(treeData)\n      this.launchTableHeader(columnsData);\n      if (bodyData) {\n        this.launchTableData(bodyData);\n      }\n      this.setState({\n        showLoading: false\n      });\n    }).catch((e) => {\n      this.launchTableHeader({});\n      this.launchTableData({});\n      this.setState({\n        showLoading: false\n      });\n      console.log(e)\n    });;\n  }\n  /**\n   * @msg: 根据treeUrl获取树数据\n   * @param {type} \n   * @return: \n   */\n  getTreeData = (res) => {\n    let { data } = res;\n    if (data && data.length > 0) {\n      this.treeData = data;\n    } else {\n      this.treeData = [];\n    }\n  }\n\n  /**\n   * 根据 refinfo 返回结果拆解并渲染表格表头\n   * @param {object} data \n   */\n  launchTableHeader = (data) => {\n    if (!data) return;\n    let { multiple, valueField } = options;\n    let keyList = data.strFieldCode || [];\n    let titleList = data.strFieldName || [];\n    let colunmsList = keyList.map((item, index) => {\n      return {\n        key: item,\n        dataIndex: item,\n        title: titleList[index]\n      }\n    });\n    if (colunmsList.length === 0) {\n      colunmsList = [{ title: \"未传递表头数据\", dataIndex: \"nodata\", key: \"nodata\" }];\n\n    } else if (!multiple) {\n      //单选时用对号符号标记当前行选中\n      colunmsList.unshift({\n        title: \" \",\n        dataIndex: \"a\",\n        key: \"a\",\n        width: 45,\n        render(text, record, index) {\n          return (\n            <Radio.RadioGroup\n              name={record[valueField]}\n              selectedValue={record._checked ? record[valueField] : null}\n            >\n              <Radio value={record[valueField]}></Radio>\n            </Radio.RadioGroup>\n          )\n        }\n      })\n\n    }\n    this.columnsData = colunmsList;\n  }\n\n\t/**\n\t * 处理并渲染表格数据\n\t */\n  launchTableData = (response) => {\n    if (!response) return;\n    let { valueField } = options;\n    let { data = [], page = {} } = response;\n    data.map((record, k) => {\n      record.key = record[valueField];\n      return record;\n    });\n    this.tableData = data;\n    this.originTableData = data;//这个没有用处，只是为了生成假数据\n    this.page = {\n      pageCount: page.pageCount || 0,\n      currPageIndex: page.currPageIndex || 0,\n      totalElements: page.totalElements || 0,\n    }\n\n  }\n  /**\n   * @msg: 左树点击,record是树的节点信息\n   * @param {type} \n   * @return: \n   */\n  onTreeChange = (record) => {\n    this.tableData = this.originTableData.slice(Math.floor(Math.random() * 8), -1);\n    this.setState({\n      mustRender: Math.random()\n    })\n  }\n  /**\n   * @msg: 左树上的搜索回调\n   * @param {type} \n   * @return: \n   */\n  onTreeSearch = (value) => {\n    alert(value);\n  }\n  /**\n  * @msg: 右表上的搜索回调\n  * @param {type} \n  * @return: \n  */\n  onTableSearch = (value) => {\n    console.log('onTableSearch', value)\n  }\n  loadTableData = (param) => {\n    console.log('loadTableData', param)\n  }\n  /**\n   * @msg: 参照确认按钮的回调\n   * @param {type} \n   * @return: \n   */\n  onSave = (result) => {\n    console.log('save', result)\n    this.setState({\n      matchData: result,\n    })\n  }\n  \n  /**\n  * @msg: 清空操作\n  * @param {type} 此时value不可以直接传'',因为''下只能清除一次，第二次清除时前后value都是''，不会触发更新操作，\n  * 因此通过refpk不一致来触发更新操作\n  * @return: \n  */\n  clearFunc = () => {\n    this.setState({\n      matchData: [],\n      value: `{\"refname\":\"\",\"refpk\":\"${Math.random()}\"}`,\n    })\n  }\n  render() {\n    options = {\n      displayField: '{refname}',\n      valueField: 'refpk',\n      lang: 'zh_CN',\n      miniSearch: true,\n      multiple: true,\n    }\n    const {value , matchData} = this.state;\n    return (\n\n      <div className=\"demo-label\">\n        <RefTreeTableWithInput\n          {...options}\n\n          treeData={this.treeData}\n          columnsData={this.columnsData}\n          tableData={this.tableData}\n          page={this.page}\n          matchData={matchData}\n          value={value}\n          \n          canClickGoOn={this.canClickGoOn}\n\n          onTreeChange={this.onTreeChange}\n          onTreeSearch={this.onTreeSearch}\n          onTableSearch={this.onTableSearch}\n          onSave={this.onSave}\n          onCancel={this.onCancel}\n          loadTableData={this.loadTableData}\n\n        />\n        <Button colors=\"primary\" onClick={this.clearFunc}>清空</Button>\n      </div>\n    )\n  }\n};\n\n\n\n\n","desc":" 清空功能：不使用form表单"}]


class Demo extends Component {
    constructor(props){
        super(props);
        this.state = {
            open: false
        }
    }
    handleClick=()=> {
        this.setState({ open: !this.state.open })
    }
    fCloseDrawer=()=>{
        this.setState({
            open: false
        })
    }

    render () {
        const { title, example, code, desc, scss_code  } = this.props;

        const header = (
            <div>
                <p className='component-title'>{ title }</p>
                <p>{ desc }</p>
                <span className='component-code' onClick={this.handleClick}> 查看源码 <i className='uf uf-arrow-right'/> </span>
            </div>
        );
        return (
            <Col md={12} id={title.trim()} className='component-demo'>
            <Panel header={header}>
                {example}
            </Panel>
           
            <Drawer className='component-drawerc' title={title} show={this.state.open} placement='right' onClose={this.fCloseDrawer}>
            <div className='component-code-copy'> JS代码 
                <Clipboard action="copy" text={code}/>
            </div>
            <pre className="pre-js">
                <code className="hljs javascript">{ code.replace('../../src/index.less',COMPONENT+'/lib/index.css').replace('../../src/index.js',COMPONENT).replace('../../src/index',COMPONENT).replace('../../src',COMPONENT) }</code>
            </pre >
            {!!scss_code ?<div className='component-code-copy copy-css'> SCSS代码 
                <Clipboard action="copy" text={scss_code}/>
            </div>:null }
                { !!scss_code ? <pre className="pre-css">
                 <code className="hljs css">{ scss_code }</code>
                 </pre> : null }
            </Drawer>
        </Col>
    )
    }
}

class DemoGroup extends Component {
    constructor(props){
        super(props)
    }
    render () {
        return (
            <Row>
            {DemoArray.map((child,index) => {

                return (
            <Demo example= {child.example} title= {child.title} code= {child.code} scss_code= {child.scss_code} desc= {child.desc} key= {index}/>
    )

    })}
    </Row>
    )
    }
}

ReactDOM.render(<DemoGroup/>, document.getElementById('root'));
